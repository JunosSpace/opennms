package org.opennms.netmgt.correlation.ncs;

import function org.opennms.core.utils.InetAddressUtils.addr;
import function org.opennms.core.utils.InetAddressUtils.str;

import java.util.Date;
import java.net.InetAddress;
import java.util.List;
import java.util.ArrayList;
import java.util.HashSet;


import org.opennms.netmgt.correlation.drools.DroolsCorrelationEngine;
import org.opennms.netmgt.model.ncs.*;
import org.opennms.netmgt.xml.event.Event;
import org.opennms.netmgt.xml.event.Parm;
import org.opennms.netmgt.xml.event.Parms;
import org.opennms.netmgt.xml.event.Value;
import org.opennms.netmgt.model.events.EventBuilder;
import org.opennms.netmgt.EventConstants;
import org.opennms.netmgt.capsd.EventUtils;
import org.drools.spi.KnowledgeHelper;
import org.opennms.netmgt.correlation.ncs.NCSCorrelationService;
import org.opennms.netmgt.correlation.ncs.NCSCorrelationService.AttrParmMap;
import org.opennms.netmgt.model.ncs.NCSComponent.DependencyRequirements;

global org.opennms.netmgt.correlation.drools.DroolsCorrelationEngine engine;
global org.opennms.netmgt.correlation.ncs.NCSCorrelationService correlationService;



rule "pseudo-wire component down"
	salience 100
when
	$e : Event( uei matches ".*jnxVpnPwDown" )
then
	retract( $e );
	List<NCSComponent> list = correlationService.findComponentsByNodeIdAndAttrParmMaps($e, map("jnxVpnPwVpnType", 1), map("jnxVpnPwVpnName", 2));
	for ( NCSComponent ncs : list ) {
		Component c = new Component( ncs );
		insert( new ComponentDownEvent( c, $e ) );
	}
end

rule "pseudo-wire component up"
	salience 100
when
	$e : Event( $uei: uei matches ".*jnxVpnPwUp" )
then
	retract( $e );
	List<NCSComponent> list = correlationService.findComponentsByNodeIdAndAttrParmMaps($e, map("jnxVpnPwVpnType", 1), map("jnxVpnPwVpnName", 2));
	for ( NCSComponent ncs : list ) {
		Component c = new Component( ncs );
		insert( new ComponentUpEvent( c, $e ) );
	}
end

rule "component deleted event"
	salience 100
when
	$e : Event( $uei: uei matches ".*componentDeleted" )
then
	retract( $e );
	
		long id = EventUtils.getLongParm( $e, "componentId", -1 );
        String type = EventUtils.getParm( $e, "componentType" );
        String name = EventUtils.getParm( $e, "componentName" );
        String foreignSource = EventUtils.getParm( $e, "componentForeignSource" );
        String foreignId = EventUtils.getParm( $e, "componentForeignId" );
        String dr = EventUtils.getParm( $e, "dependencyRequirements" );
        DependencyRequirements dependenciesRequired = Enum.valueOf( DependencyRequirements.class, dr );
        if ( id != -1 ) {
			Component c = new Component( id, type, name, foreignSource, foreignId, dependenciesRequired);
			println(" Inserting component up event" + c + " because component was deleted" );
			insert( new ComponentUpEvent( c, $e ) );
		}
		else {
			println(" ERROR: Received component delete event with no component id" );
		}
	
end

rule "Vpn interface (UNI) component down"
	salience 100
when
	$e : Event( uei matches ".*jnxVpnIfDown" )
then
	println( "Found Event " + $e.getUei() );
	retract( $e );
	List<NCSComponent> list = correlationService.findComponentsByNodeIdAndAttrParmMaps($e, map("jnxVpnIfVpnType", 1), map("jnxVpnIfVpnName", 2));
	println(" Found matching components: " + list );
	for ( NCSComponent ncs : list ) {
		Component c = new Component( ncs );
		insert( new ComponentDownEvent( c, $e ) );
	}
end

rule "Vpn interface (UNI) component up"
	salience 100
when
	$e : Event( $uei: uei matches ".*jnxVpnIfUp" )
then
	println( "Found Event " + $e.getUei() );
	retract( $e );
	List<NCSComponent> list = correlationService.findComponentsByNodeIdAndAttrParmMaps($e, map("jnxVpnIfVpnType", 1), map("jnxVpnIfVpnName", 2));
	for ( NCSComponent ncs : list ) {
		Component c = new Component( ncs );
		insert( new ComponentUpEvent( c, $e ) );
	}
end

rule "Mpls L3VPN component down"
        salience 100
when
        $e : Event( uei matches ".*mplsL3VpnVrfDown" )
then
        println( "Found Event " + $e.getUei() );
        retract( $e );
        List<NCSComponent> list = correlationService.findComponentsByNodeIdAndByParmName($e,  "mplsL3VpnVrfName", 2);
        println(" Found matching components: " + list );
        for ( NCSComponent ncs : list ) {
                Component c = new Component( ncs );
                insert( new ComponentDownEvent( c, $e ) );
        }
end

rule "Mpls L3VPN component up"
        salience 100
when
        $e : Event( $uei: uei matches ".*mplsL3VpnVrfUp" )
then
        println( "Found Event " + $e.getUei() );
        retract( $e );
        List<NCSComponent> list = correlationService.findComponentsByNodeIdAndByParmName($e,  "mplsL3VpnVrfName", 2);
        for ( NCSComponent ncs : list ) {
                Component c = new Component( ncs );
                insert( new ComponentUpEvent( c, $e ) );
        }
end

rule "mpls lsp path component down"
	salience 100
when
	$e : Event( uei matches ".*mplsLspInfoDown" )
then
	retract( $e );
	List<NCSComponent> list = correlationService.findComponentsByNodeIdAndAttrParmMaps($e, map("mplsLspInfoName", 1));
	for ( NCSComponent ncs : list ) {
		Component c = new Component( ncs );
		insert( new ComponentDownEvent( c, $e ) );
	}
end

rule "mpls lsp path component up"
	salience 100
when
	$e : Event( uei matches ".*mplsLspInfoUp" )
then
	retract( $e );
	List<NCSComponent> list = correlationService.findComponentsByNodeIdAndAttrParmMaps($e, map("mplsLspInfoName", 1));
	for ( NCSComponent ncs : list ) {
		Component c = new Component( ncs );
		insert( new ComponentUpEvent( c, $e ) );
	}
end

// Syslog Events
rule "cfmd_ccmd_defect component down"
	salience 100
when
	$e : Event( uei matches ".*cfmd_ccm_defect.*" ) and Event( uei not matches ".*cfmd_ccm_defect_none" )
then
	retract( $e );
	List<NCSComponent> list = correlationService.findComponentsByNodeIdAndAttrParmMaps($e, map("cfmLevel", 1), map("cfmMD",2), map("cfmMA", 3), map("cfmMEPInterface", 4) );
	for ( NCSComponent ncs : list ) {
		Component c = new Component( ncs );
		insert( new ComponentDownEvent( c, $e ) );
	}
end

rule "cfmd_ccmd_defect component up"
	salience 100
when
	$e : Event( uei matches ".*cfmd_ccm_defect_none" )
then
	retract( $e );
	List<NCSComponent> list = correlationService.findComponentsByNodeIdAndAttrParmMaps($e, map("cfmLevel", 1), map("cfmMD",2), map("cfmMA", 3), map("cfmMEPInterface", 4) );
	for ( NCSComponent ncs : list ) {
		Component c = new Component( ncs );
		insert( new ComponentUpEvent( c, $e ) );
	}
end

rule "node down"
	salience 100
when
	$e : Event( uei matches ".*nodeDown" )
then
	retract( $e );
	List<NCSComponent> list = correlationService.findComponentsByNodeIdAndAttrParmMaps($e /* no attributes */);
	for ( NCSComponent ncs : list ) {
		Component c = new Component( ncs );
		insert( new ComponentDownEvent( c, $e ) );
	}
end

rule "node up"
	salience 100
when
	$e : Event( uei matches ".*nodeUp" )
then
	retract( $e );
	List<NCSComponent> list = correlationService.findComponentsByNodeIdAndAttrParmMaps($e /* no attribures */);
	for ( NCSComponent ncs : list ) {
		Component c = new Component( ncs );
		insert( new ComponentUpEvent( c, $e ) );
	}
end

rule "rpd_mpls_path_bfd  component up"
          salience 100
when
          $e : Event( uei matches ".*rpd_mpls_path_bfd_up" )
then
          retract( $e );
          List<NCSComponent> list = correlationService.findComponentsByNodeIdAndAttrParmMaps($e, map("lspName", 1));
          for ( NCSComponent ncs : list ) {
                  Component c = new Component( ncs );
                  insert( new ComponentUpEvent( c, $e ) );
          }
end

rule "rpd_mpls_path_bfd  component down"
          salience 100
when
          $e : Event( uei matches ".*rpd_mpls_path_bfd_down" )
then
          retract( $e );
          List<NCSComponent> list = correlationService.findComponentsByNodeIdAndAttrParmMaps($e, map("lspName", 1));
          for ( NCSComponent ncs : list ) {
                  Component c = new Component( ncs );
                  insert( new ComponentDownEvent( c, $e ) );
          }
end

rule "lfmd_3ah_linkup  component up"
          salience 100
when
          $e : Event( uei matches ".*lfmd_3ah_linkup" )
then
          retract( $e );
          List<NCSComponent> list = correlationService.findComponentsByNodeIdAndAttrParmMaps($e, map("lfmLinkName", 1));
          for ( NCSComponent ncs : list ) {
                  Component c = new Component( ncs );
                  insert( new ComponentUpEvent( c, $e ) );
          }
end

rule "lfmd_3ah_linkdown  component down"
          salience 100
when
          $e : Event( uei matches ".*lfmd_3ah_linkdown" )
then
          retract( $e );
          List<NCSComponent> list = correlationService.findComponentsByNodeIdAndAttrParmMaps($e, map("lfmLinkName", 1));
          for ( NCSComponent ncs : list ) {
                  Component c = new Component( ncs );
                  insert( new ComponentDownEvent( c, $e ) );
          }
end

rule "gre_linkup  component up"
          salience 100
when
          $e : Event( uei matches ".*SNMP_Link_Up" )
then
          retract( $e );
          List<NCSComponent> list = correlationService.findComponentsByNodeIdAndAttrParmMaps($e, map("ifName", 6));
          for ( NCSComponent ncs : list ) {
                  Component c = new Component( ncs );
                  insert( new ComponentUpEvent( c, $e ) );
          }
end

rule "gre_linkdown component down"
          salience 100
when
          $e : Event( uei matches ".*SNMP_Link_Down" )
then
          retract( $e );
          List<NCSComponent> list = correlationService.findComponentsByNodeIdAndAttrParmMaps($e, map("ifName", 6));
          for ( NCSComponent ncs : list ) {
                  Component c = new Component( ncs );
                  insert( new ComponentDownEvent( c, $e ) );
          }
end


rule "TCA PTP component one down"
          salience 100
when
          $e : Event( uei matches ".*jnxTcaTrapMsgFrequencyHoldover" )

then
          retract( $e );
          List<NCSComponent> list = correlationService.findComponentsByNodeIdAndAttrParmMaps($e, map("ipAddress", 4));
          for ( NCSComponent ncs : list ) {
                  Component c = new Component( ncs );
                  insert( new ComponentDownEvent( c, $e ) );
          }
end

rule "TCA PTP component one up"
          salience 100
when
          $e : Event( uei matches ".*jnxTcaTrapMsgFrequencyHoldoverCleared" )

then
          retract( $e );
          List<NCSComponent> list = correlationService.findComponentsByNodeIdAndAttrParmMaps($e, map("ipAddress", 4));
          for ( NCSComponent ncs : list ) {
                  Component c = new Component( ncs );
                  insert( new ComponentUpEvent( c, $e ) );
          }
end

rule "TCA PTP component two down"
          salience 100
when
          $e : Event( uei matches ".*jnxTcaTrapMsgFrequencyFreerun" )

then
          retract( $e );
          List<NCSComponent> list = correlationService.findComponentsByNodeIdAndAttrParmMaps($e, map("ipAddress", 4));
          for ( NCSComponent ncs : list ) {
                  Component c = new Component( ncs );
                  insert( new ComponentDownEvent( c, $e ) );
          }
end

rule "TCA PTP component two up"
          salience 100
when
          $e : Event( uei matches ".*jnxTcaTrapMsgFrequencyFreerunCleared" )

then
          retract( $e );
          List<NCSComponent> list = correlationService.findComponentsByNodeIdAndAttrParmMaps($e, map("ipAddress", 4));
          for ( NCSComponent ncs : list ) {
                  Component c = new Component( ncs );
                  insert( new ComponentUpEvent( c, $e ) );
          }
end

rule "MX SyncE component down"
          salience 100
when
          $e : Event( uei matches ".*jnxTimingEventDpllStatus" )

then
          retract( $e );
          List<NCSComponent> list = correlationService.findComponentsByNodeIdAndAttrParmMaps($e, map("ipAddress", 4));
          for ( NCSComponent ncs : list ) {
                  Component c = new Component( ncs );
                  insert( new ComponentDownEvent( c, $e ) );
          }
end

rule "MX SyncE component up"
          salience 100
when
          $e : Event( uei matches ".*jnxTimingEventDpllStatusCleared" )

then
          retract( $e );
          List<NCSComponent> list = correlationService.findComponentsByNodeIdAndAttrParmMaps($e, map("ipAddress", 4));
          for ( NCSComponent ncs : list ) {
                  Component c = new Component( ncs );
                  insert( new ComponentUpEvent( c, $e ) );
          }
end

rule "MX PTP component down"
          salience 100
when
          $e : Event( uei matches ".*jnxTimingEventPtpServoStatus" )

then
          retract( $e );
          List<NCSComponent> list = correlationService.findComponentsByNodeIdAndAttrParmMaps($e, map("ipAddress", 4));
          for ( NCSComponent ncs : list ) {
                  Component c = new Component( ncs );
                  insert( new ComponentDownEvent( c, $e ) );
          }
end

rule "MX PTP component up"
          salience 100
when
          $e : Event( uei matches ".*jnxTimingEventPtpServoStatusCleared" )

then
          retract( $e );
          List<NCSComponent> list = correlationService.findComponentsByNodeIdAndAttrParmMaps($e, map("ipAddress", 4));
          for ( NCSComponent ncs : list ) {
                  Component c = new Component( ncs );
                  insert( new ComponentUpEvent( c, $e ) );
          }
end

function void println(Object msg)
{
	System.err.println(new Date() + " : " + msg);
}

function AttrParmMap map( String attrName, int parmIndex )
{
	return new AttrParmMap(attrName, parmIndex);	
}

function void sendImpactedComponentEvent( DroolsCorrelationEngine engine, Component c, Event e )
{
	EventBuilder bldr = new EventBuilder( "uei.opennms.org/internal/ncs/componentImpacted", "Component Correlator" );
	bldr.addParam("componentType", c.getType() );
	bldr.addParam("componentName", c.getName() );
	bldr.addParam("componentForeignSource", c.getForeignSource() );
	bldr.addParam("componentForeignId", c.getForeignId() );
	bldr.addParam("cause", e.getDbid() );
	engine.sendEvent(bldr.getEvent());
}


function void sendResolvedComponentEvent( DroolsCorrelationEngine engine, Component c, Event e)
{
	EventBuilder bldr = new EventBuilder( "uei.opennms.org/internal/ncs/componentResolved", "Component Correlator" );
	bldr.addParam("componentType", c.getType() );
	bldr.addParam("componentName", c.getName() );
	bldr.addParam("componentForeignSource", c.getForeignSource() );
	bldr.addParam("componentForeignId", c.getForeignId() );
	bldr.addParam("cause", e.getDbid() );
	engine.sendEvent(bldr.getEvent());
}



